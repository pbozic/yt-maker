// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
     relationMode = "prisma"
}

generator zod {
  provider       = "zod-prisma-types"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?  @db.Text
    access_token      String?  @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?  @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    channels      Channel[] // Add this line to create the opposite relation field
    medis         Media[] // Add this line to create the opposite relation field
    generatedVideos GeneratedVideo[] // Add this line to create the opposite relation field

}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
model Channel {
    id        String    @id @default(cuid())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    createdBy   User   @relation(fields: [createdById], references: [id])
    youtubeId String
    createdById String
    generatedVideos GeneratedVideo[]

    @@index([createdById])
}
// create a custom MediaType for prima model
enum MediaType {
    VIDEO
    AUDIO
    IMAGE
    TEXT
}

model Media {
    // TODO:
    // add metadata attributes to model
    id                  String    @id @default(cuid())
    title               String
    description         String?
    thumbnailUrl        String?
    type                MediaType
    url                 String?
    width               Int?
    height              Int?
    audio_stream        String?   @db.LongText
    video_stream        String?   @db.LongText
    duration            Int?
    video_codec         Json?   
    audio_codec         Json?   
    key                 String    @unique
    createdAt           DateTime  @default(now())
    updatedAt           DateTime  @updatedAt
    user                User      @relation(fields: [userId], references: [id])
    userId              String
    // add relation to channel model many to many
    generatedVideos     GeneratedVideo[] @relation("GeneratedVideoMedia")
    tags                Tag[]   @relation("MediaTags")

    @@index([userId])
}
model Tag {
    id          String    @id @default(cuid())
    name        String    @unique
    media       Media[]   @relation("MediaTags")
    parentTagId String?
    parentTag   Tag?      @relation("SubTags", fields: [parentTagId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    childTags   Tag[]    @relation("SubTags")

    @@index([parentTagId])
}
// generate prisma model for a GeneratedVideo with manytomany relation to Media and a one to many relation to Channel with title and description thumbnail and url and postedToYt flag and timestamp and duration
model GeneratedVideo {
    id          String    @id @default(cuid())
    title       String
    description String?
    thumbnail   String?
    url         String
    algorithm   String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    user        User     @relation(fields: [userId], references: [id])
    userId      String
    channel     Channel  @relation(fields: [channelId], references: [id])
    channelId   String
    media       Media[]   @relation("GeneratedVideoMedia")
    @@index([userId])
    @@index([channelId])
}
